function HasProperty(Instance,Property)
	if Instance and Property then
		if typeof(Instance) == "Instance" and typeof(Property) == "string" then
			return pcall(function()
				s = Instance[Property]
			end)
		end
	end
	return false
end
function GetRootPart(Player)
	if Player then
		if typeof(Player) == "Instance" then
			if Player.Parent == game:GetService("Players") then
				if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character.Humanoid.Health > 0 then
					if Player.Character:FindFirstChild("HumanoidRootPart") then
						return Player.Character:FindFirstChild("HumanoidRootPart")
					elseif Player.Character:FindFirstChild("Torso") then
						return Player.Character:FindFirstChild("Torso")
					elseif Player.Character:FindFirstChild("UpperTorso") then
						return Player.Character:FindFirstChild("UpperTorso")
					elseif Player.Character:FindFirstChild("LowerTorso") then
						return Player.Character:FindFirstChild("LowerTorso")
					elseif Player.Character.PrimaryPart then
						return Player.Character.PrimaryPart
					end
				end
			end
		elseif typeof(Player) == "string" then
			if game.Players:FindFirstChild(Player) then
				Player = game.Players:FindFirstChild(Player)
				if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character.Humanoid.Health > 0 then
					if Player.Character:FindFirstChild("HumanoidRootPart") then
						return Player.Character:FindFirstChild("HumanoidRootPart")
					elseif Player.Character:FindFirstChild("Torso") then
						return Player.Character:FindFirstChild("Torso")
					elseif Player.Character:FindFirstChild("UpperTorso") then
						return Player.Character:FindFirstChild("UpperTorso")
					elseif Player.Character:FindFirstChild("LowerTorso") then
						return Player.Character:FindFirstChild("LowerTorso")
					elseif Player.Character.PrimaryPart then
						return Player.Character.PrimaryPart
					end
				end
			end
		end
	end
	return nil
end
function PressKey(Key)
	if Key and typeof(Key) == "string" and #Key == 1 and table.find(Enum.KeyCode:GetEnumItems(),Enum.KeyCode[Key]) then
		Key = Enum.KeyCode[Key]
	end
	if Key and table.find(Enum.KeyCode:GetEnumItems(),Key) then
		game:GetService('VirtualInputManager'):SendKeyEvent(true, Key, false, game)
		game:GetService('VirtualInputManager'):SendKeyEvent(false, Key, false, game)
	end
end
function HoldKey(Key)
	if not Key then
		return
	end
	if typeof(Key) == "string" and #Key == 1 and table.find(Enum.KeyCode:GetEnumItems(),Enum.KeyCode[Key]) then
		Key = Enum.KeyCode[Key]
	end
	if table.find(Enum.KeyCode:GetEnumItems(),Key) then
		game:GetService('VirtualInputManager'):SendKeyEvent(true, Key, false, game)
	end
end
function ReleaseKey(Key)
	if not Key then
		return
	end
	if typeof(Key) == "string" and #Key == 1 and table.find(Enum.KeyCode:GetEnumItems(),Enum.KeyCode[Key]) then
		Key = Enum.KeyCode[Key]
	end
	if table.find(Enum.KeyCode:GetEnumItems(),Key) then
		game:GetService('VirtualInputManager'):SendKeyEvent(false, Key, false, game)
	end
end
function Click()
	local Mouse = setmetatable({}, {
		__index = function(table, index)
			return game:GetService("UserInputService"):GetMouseLocation()[index]
		end
	})
	for i = 1, 2 do
		game:GetService("VirtualInputManager"):SendMouseButtonEvent(Mouse.X, Mouse.Y, false and 1 or 0, i == 1, nil, 0)
	end
end
function Touch(Part, TouchInterest)
	if TouchInterest:IsA('TouchInterest') and TouchInterest.Parent:IsA('BasePart') then
		firetouchinterest(Part, TouchInterest.Parent, 0)
		firetouchinterest(Part, TouchInterest.Parent, 1)
	elseif TouchInterest:IsA('BasePart') and TouchInterest:FindFirstChildWhichIsA('TouchInterest') then
		firetouchinterest(Part, TouchInterest, 0)
		firetouchinterest(Part, TouchInterest, 1)
	end
end
function View(ViewPart)
	if game:GetService("Workspace").CurrentCamera then
		if ViewPart:IsA("Model") or ViewPart:IsA("BasePart") or ViewPart:IsA("Humanoid") then
			game:GetService("Workspace").CurrentCamera.CameraSubject = ViewPart
		end
	end
end
function IsVisible(Part,Ignore)
	local raycastParams = RaycastParams.new()
	raycastParams.FilterDescendantsInstances = Ignore
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
	if typeof(Part) == "Instance" then
		if Part:IsA("Model") then
			return game:GetService("Workspace"):Raycast(game:GetService("Workspace").CurrentCamera.CFrame.Position, (Part:GetPivot().Position - game:GetService("Workspace").CurrentCamera.CFrame.Position), raycastParams) == nil
		elseif Part:IsA("BasePart") then
			return game:GetService("Workspace"):Raycast(game:GetService("Workspace").CurrentCamera.CFrame.Position, (Part.Position - game:GetService("Workspace").CurrentCamera.CFrame.Position), raycastParams) == nil
		end
	elseif typeof(Part) == "Vector3" then
		return game:GetService("Workspace"):Raycast(game:GetService("Workspace").CurrentCamera.CFrame.Position, (Part - game:GetService("Workspace").CurrentCamera.CFrame.Position), raycastParams) == nil
	elseif typeof(Part) == "CFrame" then
		return game:GetService("Workspace"):Raycast(game:GetService("Workspace").CurrentCamera.CFrame.Position, (Part.Position - game:GetService("Workspace").CurrentCamera.CFrame.Position), raycastParams) == nil
	end
end
function GetPlayerFromPartial(Partial)
    for i,v in pairs(game:GetService("Players"):GetPlayers()) do
        if v.Name:lower() == Partial:lower() then
            return v
        end
    end
    for i,v in pairs(game:GetService("Players"):GetPlayers()) do
        if v.DisplayName:lower() == Partial:lower() then
            return v
        end
    end
    for i,v in pairs(game:GetService("Players"):GetPlayers()) do
        if string.sub(v.Name:lower(),1,#Partial) == Partial:lower() then
            return v
        end
    end
    for i,v in pairs(game:GetService("Players"):GetPlayers()) do
        if string.sub(v.DisplayName:lower(),1,#Partial) == Partial:lower() then
            return v
        end
    end
    local t={}
    for i,v in pairs(game:GetService("Players"):GetPlayers()) do
        t[v.Name]={}
        t[v.Name][v.Name] = CheckDiff(v.Name:lower():sub(1,#Partial),Partial:lower())
        t[v.Name][v.DisplayName] = CheckDiff(v.DisplayName:lower():sub(1,#Partial),Partial:lower())
    end
    local lowest = {{2,#Partial+1}}
    local lowest2 = {{2,#Partial+1}}
    for i,v in pairs(t) do
        if lowest[1][2] > v[i] then
            lowest = {}
            lowest[1] = {i,v[i]}
        elseif lowest[1][2] == v[i] then
            table.insert(lowest,{i,v[i]})
        end
        if lowest2[1][2] > v[i] then
            lowest2 = {}
            lowest2[1] = {i,v[i]}
        elseif lowest2[1][2] == v[i] then
            table.insert(lowest2,{i,v[i]})
        end
    end
    
    if lowest[1][2] <= lowest2[1][2] then
        return Playerlist[lowest[math.random(1,#lowest)][1]]
    else
        return Playerlist[lowest2[math.random(1,#lowest2)][1]]
    end
end
function Walk(Destination,PathFinding,SpawnFunction,Balls)
	function ActualWalk(Position)
		if PathFinding then
			local Path = game:GetService("PathfindingService"):CreatePath()
			Path:ComputeAsync(game.Players.LocalPlayer.Character.HumanoidRootPart.Position, Position)
			local Waypoints = Path:GetWaypoints()
			local Folder = Instance.new("Folder",game:GetService("Workspace").CurrentCamera)
			for i=1,#Waypoints do
				Part = Instance.new("Part",Folder)
				Part.Anchored = true
				Part.CanCollide = false
				Part.CFrame = CFrame.new(Vector3.new(Waypoints[i].Position.X,Waypoints[i].Position.Y + 2.5,Waypoints[i].Position.Z))
				if Waypoints[i].Action == Enum.PathWaypointAction.Jump then
					Part.Color = Color3.fromRGB(255,0,0)
				else
					Part.Color = Color3.fromRGB(255,123,0)
				end
				Part.Material = Enum.Material.Neon
				Part.Name = i
				Part.Shape = "Ball"
				if not Balls then
					Part.Visible = false
				end
				Part.Size = Vector3.new(.75,.75,.75)
			end
			local Humanoid = game.Players.LocalPlayer.Character.Humanoid
			DisableMovement()
			local Finished
			Humanoid.StateChanged:Connect(function()
				Finished = true
			end)
			for i=1,#Waypoints do
				if Folder:FindFirstChild(i-1) then
					Folder:FindFirstChild(i-1):destroy()
				end
				Folder:FindFirstChild(i).Color = Color3.fromRGB(0,255,0)
				if Humanoid.FloorMaterial == Enum.Material.Air then
					repeat wait() until Humanoid.FloorMaterial ~= Enum.Material.Air
				end
				if Waypoints[i].Action == Enum.PathWaypointAction.Jump then
					if Waypoints[i+1].Action == Enum.PathWaypointAction.Jump then
						Part = Folder:FindFirstChild(i)
					else
						Part = Folder:FindFirstChild(i+1 or i)
					end
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.lookAt(game.Players.LocalPlayer.Character.HumanoidRootPart.Position, Vector3.new(Part.Position.X,game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Y,Part.Position.Z))
					wait()
					Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
					wait()
					if Waypoints[i+1].Action == Enum.PathWaypointAction.Jump then
						Humanoid:MoveTo(Waypoints[i].Position)
					else
						Humanoid:MoveTo((Waypoints[i+1] or Waypoints[i]).Position)
					end
				else
					if i>1 then
						Part = Folder:FindFirstChild(i)
						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.lookAt(game.Players.LocalPlayer.Character.HumanoidRootPart.Position, Vector3.new(Part.Position.X,game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Y,Part.Position.Z))
					end
					Humanoid:MoveTo(Waypoints[i].Position)
				end
				if game:GetService("Players").LocalPlayer.Character.Humanoid:GetState() == Enum.HumanoidStateType.Dead then
					break
				end
				local Value
				Humanoid.MoveToFinished:Connect(function()
					Value = true
				end)
				repeat wait() until Value
				Value = false
				if game:GetService("Players").LocalPlayer.Character.Humanoid:GetState() == Enum.HumanoidStateType.Dead then
					break
				end
			end
			EnableMovement()
			Folder:destroy()
		else
			game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid"):MoveTo(Position)
		end
	end
	if not SpawnFunction then
		if typeof(Destination) == "Vector3" then
			ActualWalk(Destination)
		elseif typeof(Destination) == "CFrame" or (typeof(Destination) == "Instance" and Destination:IsA("BasePart")) then
			ActualWalk(Destination.Position)
		end
	else
		spawn(function()
			if typeof(Destination) == "Vector3" then
				ActualWalk(Destination)
			elseif typeof(Destination) == "CFrame" or (typeof(Destination) == "Instance" and Destination:IsA("BasePart")) then
				ActualWalk(Destination.Position)
			end
		end)
	end
end
function DisableMovement()
	local w = 0
	local a = 0
	local s = 0
	local d = 0
	local jumping = false
	for i,v in pairs(game:GetService("ContextActionService"):GetAllBoundActionInfo()) do
		if i == "jumpAction" or i == "moveForwardAction" or i == "moveLeftAction" or i == "moveBackwardAction" or i == "moveRightAction" then
			game:GetService("ContextActionService"):UnbindAction(i)
		end
	end
	pcall(function()
		game:GetService("RunService"):UnbindFromRenderStep("Move")
	end)
end
function EnableMovement()
	local w = 0
	local a = 0
	local s = 0
	local d = 0
	local jumping = false
	game:GetService("ContextActionService"):BindActionAtPriority("jumpAction",function(_,b,_) if b == Enum.UserInputState.Begin then jumping = true else jumping = false end end,false,2000,Enum.PlayerActions.CharacterJump)
	game:GetService("ContextActionService"):BindActionAtPriority("moveForwardAction",function(_,b,_) if b == Enum.UserInputState.Begin then w = 1 else w = 0 end end,false,2000,Enum.PlayerActions.CharacterForward)
	game:GetService("ContextActionService"):BindActionAtPriority("moveLeftAction",function(_,b,_) if b == Enum.UserInputState.Begin then a = 1 else a = 0 end end,false,2000,Enum.PlayerActions.CharacterLeft)
	game:GetService("ContextActionService"):BindActionAtPriority("moveBackwardAction",function(_,b,_) if b == Enum.UserInputState.Begin then s = 1 else s = 0 end end,false,2000,Enum.PlayerActions.CharacterBackward)
	game:GetService("ContextActionService"):BindActionAtPriority("moveRightAction",function(_,b,_) if b == Enum.UserInputState.Begin then d = 1 else d = 0 end end,false,2000,Enum.PlayerActions.CharacterRight)
	function CalculateDirection()
		return Vector3.new(d-a,0,s-w)
	end
	pcall(function()
		game:GetService("RunService"):UnbindFromRenderStep("Move")
	end)
	game:GetService("RunService"):BindToRenderStep("Move", Enum.RenderPriority.Character.Value + 1, function()
		if game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid") and game:GetService("Players").LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Dead then
			Vector = CalculateDirection()
			Humanoid = game:GetService("Players").LocalPlayer.Character.Humanoid
			if Vector ~= Vector3.new(0,0,0) then
				Humanoid:Move(Vector,true)
			end
			if jumping then
				if Humanoid.FloorMaterial ~= Enum.Material.Air then
					Humanoid.Jump = true
				end
			end
		end
	end)
end
function IsInArea(Table)
	if typeof(Table) == "table" then
		if Table["V1"] and typeof(Table["V1"]) == "Vector3" and Table["V2"] and typeof(Table["V2"]) == "Vector3"  then
			if Table["Position"] then
				local MinX
				local MinY
				local MinZ
				local MaxX
				local MaxY
				local MaxZ
				if Table["V1"].X > Table["V2"].X then
					MinX = Table["V2"].X
					MaxX = Table["V1"].X
				else
					MinX = Table["V1"].X
					MaxX = Table["V2"].X
				end
				if Table["V1"].Y > Table["V2"].Y then
					MinY = Table["V2"].Y
					MaxY = Table["V1"].Y
				else
					MinY = Table["V1"].Y
					MaxY = Table["V2"].Y
				end
				if Table["V1"].Z > Table["V2"].Z then
					MinZ = Table["V2"].Z
					MaxZ = Table["V1"].Z
				else
					MinZ = Table["V1"].Z
					MaxZ = Table["V2"].Z
				end
				if (typeof(Table["Position"]) == "Instance" and Table["Position"]:IsA("BasePart")) or typeof(Table["Position"]) == "CFrame" then
					if Table["Position"].Position.X > MinX and Table["Position"].Position.X < MaxX then
						if Table["Position"].Position.Y > MinY and Table["Position"].Position.Y < MaxY then
							if Table["Position"].Position.Z > MinZ and Table["Position"].Position.Z < MaxZ then
								return true
							end
						end
					end
				elseif typeof(Table["Position"]) == "Vector3" then
					if Table["Position"].X > MinX and Table["Position"].X < MaxX then
						if Table["Position"].Y > MinY and Table["Position"].Y < MaxY then
							if Table["Position"].Z > MinZ and Table["Position"].Z < MaxZ then
								return true
							end
						end
					end
				end
			end
		elseif Table["Zone"] and typeof(Table["Zone"]) == "Instance" and Table["Zone"]:IsA("BasePart") then
			if Table["Position"] then
				local MinX = Table["Zone"].Position.X-Table["Zone"].Size.X/2
				local MinY = Table["Zone"].Position.Y-Table["Zone"].Size.Y/2
				local MinZ = Table["Zone"].Position.Z-Table["Zone"].Size.Z/2
				local MaxX = Table["Zone"].Position.X+Table["Zone"].Size.X/2
				local MaxY = Table["Zone"].Position.Y+Table["Zone"].Size.Y/2
				local MaxZ = Table["Zone"].Position.Z+Table["Zone"].Size.Z/2
				if (typeof(Table["Position"]) == "Instance" and Table["Position"]:IsA("BasePart")) or typeof(Table["Position"]) == "CFrame" then
					if Table["Position"].Position.X > MinX and Table["Position"].Position.X < MaxX then
						if Table["Position"].Position.Y > MinY and Table["Position"].Position.Y < MaxY then
							if Table["Position"].Position.Z > MinZ and Table["Position"].Position.Z < MaxZ then
								return true
							end
						end
					end
				elseif typeof(Table["Position"]) == "Vector3" then
					if Table["Position"].X > MinX and Table["Position"].X < MaxX then
						if Table["Position"].Y > MinY and Table["Position"].Y < MaxY then
							if Table["Position"].Z > MinZ and Table["Position"].Z < MaxZ then
								return true
							end
						end
					end
				end
			end
		end
	end
	return false
end
function CheckUrl(Url)
	local OldUrl = Url
	pcall(function()
		Url = game:GetService("HttpService"):GetAsync(Url)
	end)
	if Url ~= OldUrl then
		return true
	end
	return false
end
local NoClipTable = {}
spawn(function()
	while true and wait() do
		if _G.IsTweening == true and GetRootPart(game.Players.LocalPlayer) then
			if not _G.AntiGravity then
				_G.AntiGravity = Instance.new("BodyForce")
				_G.AntiGravity.Parent = GetRootPart(game.Players.LocalPlayer)
			elseif _G.AntiGravity and not _G.AntiGravity.Parent then
				_G.AntiGravity = Instance.new("BodyForce")
				_G.AntiGravity.Parent = GetRootPart(game.Players.LocalPlayer)
			end
			GetRootPart(game.Players.LocalPlayer).Velocity = Vector3.new(0,0,0)
			_G.AntiGravity.Force = Vector3.new(0, GetRootPart(game.Players.LocalPlayer).AssemblyMass * workspace.Gravity, 0)
			for i,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
				if v:IsA("BasePart") and v.CanCollide == true then
					table.insert(NoClipTable,v)
					v.CanCollide = false
				end
			end
		elseif _G.IsTweening ~= true and GetRootPart(game.Players.LocalPlayer) then
			if _G.AntiGravity and _G.AntiGravity.Parent then
				_G.AntiGravity:destroy()
			end
			for i,v in pairs(NoClipTable) do
				v.CanCollide = true
				NoClipTable[i] = nil
			end
		end
	end
end)
function Tween(Location,Speed,Started)
	if typeof(Location) ~= "Instance" and typeof(Location) ~= "Vector3" and typeof(Location) ~= "CFrame" then 
		return 
	elseif typeof(Location) == "Vector3" then
		local l = Instance.new("Part")
		l.Position = Location
		Location = l
	elseif typeof(Location) == "CFrame" then
		local l = Instance.new("Part")
		l.CFrame = Location
		Location = l
	elseif typeof(Location) == "Instance" and not Location:IsA("BasePart") then
		return
	end
	if GetRootPart(game.Players.LocalPlayer) then else return end
	Started = game:GetService("Workspace").DistributedGameTime
	_G.Started = Started
	if _G.IsTweening == true then
		_G.IsTweening = "Stop"
		repeat wait() until _G.IsTweening == "Stopped"
	end
	spawn(function()
		local Tween = game:GetService("TweenService"):Create(GetRootPart(game.Players.LocalPlayer),TweenInfo.new((GetRootPart(game.Players.LocalPlayer).Position-Location.Position).magnitude/Speed,Enum.EasingStyle.Linear,Enum.EasingDirection.Out),{["CFrame"]=Location.CFrame})
		_G.IsTweening = true
		Tween:Play()
		Tween.Completed:Connect(function() if Started == _G.Started then _G.IsTweening = "Stop" end end)
		repeat wait() until _G.IsTweening == "Stop"
		_G.AntiGravity:Destroy()
		_G.IsTweening = "Stopped"
	end)
end
function StopTween()
	_G.IsTweening = "Stop"
end
function CheckDiff(w,i)
    local d
    for I=1,#w do
        if d then
            d = Check(w,d,I)
        else
            d = Check(w,i,I)
        end
        if d == w then
            return I
        end
    end
end
