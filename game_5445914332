if not isfile("Server.txt") then
    writefile("Server.txt","")
end
if not isfile("Game.txt") then
    writefile("Game.txt","")
end

function LoadFile()
    if readfile("Server.txt") ~= "" then
        local json1 = readfile("Server.txt")
        data1 = game:GetService("HttpService"):JSONDecode(json1)
    end
    if readfile("Game.txt") ~= "" then
        local json = readfile("Game.txt")
        data = game:GetService("HttpService"):JSONDecode(json)
    end
end

LoadFile()
if data1 ~= nil then
    if game.JobId == data1.JobId then
        game.Players.LocalPlayer:kick("Kicked. Premium User Activity: You Are Banned from this Server")
    end
end
if data ~= nil then
    if game.PlaceId == data.PlaceId then
        game.Players.LocalPlayer:kick("Kicked. Premium User Activity: You Are Banned from this Game")
    end
end



local queue_on_teleport = queue_on_teleport or syn and syn.queue_on_teleport ('repeat wait() until game:IsLoaded() repeat wait() until game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") wait(2)  loadstring(game:HttpGet("https://raw.githubusercontent.com/notavailable10/notavailable10/main/Loader"))()')

loadstring(game:HttpGet("https://raw.githubusercontent.com/joemuma/script/main/Notification"))()

noti("Island Tribes")
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local colors = {
    SchemeColor = Color3.fromRGB(225,60,60),
    Background = Color3.fromRGB(20,20,20),
    Header = Color3.fromRGB(10,10,10),
    TextColor = Color3.fromRGB(225,225,225),
    ElementColor = Color3.fromRGB(40,40,40)
}

local Window = Library.CreateLib("RAZE Series X", colors)






--[[
-------------------Welcome----------------
--]]







local Welcome = Window:NewTab("Welcome")
local Welcome = Welcome:NewSection("Welcome")
Welcome:NewLabel("Welcome "..game.Players.LocalPlayer.Name)
Welcome:NewLabel("Thanks for using RAZE Series X")









--[[
-------------------Combat----------------
--]]







local Combat = Window:NewTab("Combat")
local Combat = Combat:NewSection("Combat")
Combat:NewToggle("Killaura", "Hits Everyone Near u", function(state)
    if state then
    pcall(function()
        _, Dis, Github ="main.git"
        
        ,nil,nil;getgenv().MaxDistance=15;getgenv().KillAuraActive=true;
        
        function GetClosestTorso()
           local closest
           local plrtorso = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
           for _,v in pairs(game:GetService("Players"):GetPlayers()) do
               if v.Character and v ~= game:GetService("Players").LocalPlayer then
                   local torso = v.Character:FindFirstChild("HumanoidRootPart")
                   if torso and (closest == nil or (torso.Position - plrtorso.Position).magnitude < (closest.Position - plrtorso.Position).magnitude) then
                        if (torso.Position - plrtorso.Position).magnitude <= getgenv().MaxDistance then
                           closest = torso
                        end
                   end
               end
           end
           wait()
           return closest
        end
        
        function HitPlayer()
            local Closest = GetClosestTorso()
            if Closest ~= nil then
                local Player = game:GetService("Players"):GetPlayerFromCharacter(Closest.Parent)
                local args = {
                    [1] = 1,
                    [2] = "Destroyable",
                    [3] = Player.Character
                }
                
                game:GetService("ReplicatedStorage").References.Comm.Events.ToolAction:FireServer(unpack(args))
            end
        end
        
        while getgenv().KillAuraActive == true do
           HitPlayer()
           wait() 
        end

    end)
    else
        getgenv().KillAuraActive = false
    end
end)
local function GetNearestAnimal()
    local Closest
    local PlayerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
     
    for i,v in pairs(workspace:GetDescendants()) do
        if v:FindFirstChild("Health") and v:FindFirstChildWhichIsA("BasePart") and v:FindFirstChild("Humanoid") and not v:FindFirstChild("Body Colors")  then
            if Closest == nil then
                Closest = v:FindFirstChildWhichIsA("BasePart")
            else
                if (PlayerPosition - v:FindFirstChildWhichIsA("BasePart").Position).magnitude < (Closest.Position - PlayerPosition).magnitude then
                    Closest = v:FindFirstChildWhichIsA("BasePart")
                end
            end 
        end
    end
    return Closest.Parent
end
Combat:NewToggle("Animal Aura", "Automaticly Kills Animals", function(state)
    if state then
        getgenv().AutoAnimal = true
        while getgenv().AutoAnimal == true do
            pcall(function()
                NeareastAnimal = GetNearestAnimal()
                Mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - NeareastAnimal:FindFirstChildWhichIsA("BasePart").Position).magnitude
                
                if Mag <= 20 then
                    local args = {
                        [1] = 1,
                        [2] = "Destroyable",
                        [3] = NeareastAnimal 
                    }
                    
                    game:GetService("ReplicatedStorage").References.Comm.Events.ToolAction:FireServer(unpack(args))
                end
            end)
            wait()
        end
    else
        getgenv().AutoAnimal = false
    end
end)





--[[
-------------------LocalPlayer----------------
--]]







local LocalPlayer = Window:NewTab("Local Player")
local LocalPlayer = LocalPlayer:NewSection("Local Player")
LocalPlayer:NewTextBox("View Player","Views The Player Of The Name u Write",function(txt)
    pcall(function()
    function getFullNameFromPartial(PartialName)
        local CurrentPlayer=nil;
        local Players= game.Players:GetPlayers();
        for i=1,#Players do
            local foundPlayer=Players[i];
            if string.lower(foundPlayer.DisplayName):sub(1,#PartialName)==string.lower(PartialName)then
                CurrentPlayer=foundPlayer;
                break;
            elseif string.lower(foundPlayer.Name):sub(1,#PartialName)==string.lower(PartialName)then
                CurrentPlayer=foundPlayer;
                break;
            end;
        end;
        return CurrentPlayer;
    end
    
    local CurrentPlayer = getFullNameFromPartial(txt)
    
    game:GetService("Workspace").Camera.CameraSubject = CurrentPlayer.Character.Humanoid
    end)
end)
LocalPlayer:NewTextBox("Teleport to Player", "Type name of Player to teleport", function(txt)
    function getFullNameFromPartial(PartialName)
        local CurrentPlayer=nil;
        local Players= game.Players:GetPlayers();
        for i=1,#Players do
            local foundPlayer=Players[i];
            if string.lower(foundPlayer.DisplayName):sub(1,#PartialName)==string.lower(PartialName)then
                CurrentPlayer=foundPlayer;
                break;
            elseif string.lower(foundPlayer.Name):sub(1,#PartialName)==string.lower(PartialName)then
                CurrentPlayer=foundPlayer;
                break;
            end;
        end;
        return CurrentPlayer;
    end

    local CurrentPlayer = getFullNameFromPartial(txt)


    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CurrentPlayer.Character.HumanoidRootPart.CFrame
end)
LocalPlayer:NewButton("Fix View", "Views Urself", function()
    game:GetService("Workspace").Camera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
end)
local noclip = false
LocalPlayer:NewKeybind("Noclip", "Noclip", Enum.KeyCode.G, function()
local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    noclip = not noclip
    while true do
        if noclip then
            for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                pcall(function()
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                    end
                end)
            end
        end
        game:GetService("RunService").Stepped:wait()
    end
end)
CurFly = false
Fly = true
flyspeed = 1
vehicleflyspeed = 1
fly = false
LocalPlayer:NewKeybind("Fly", "Fly Around", Enum.KeyCode.X, function()
    if fly == false then
        fly = not fly
        Mouse = game.Players.LocalPlayer:GetMouse()
        function getRoot(char)
        	local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
        	return rootPart
        end
        function sFLY(vfly)
        	repeat wait() until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and getRoot(game.Players.LocalPlayer.Character) and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        	repeat wait() until Mouse
        	if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
            
        	local T = getRoot(game.Players.LocalPlayer.Character)
        	local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
        	local lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
        	local SPEED = 0
        
        	local function FLY()
        		CurFly = true
        		local BG = Instance.new('BodyGyro')
        		local BV = Instance.new('BodyVelocity')
        		BG.P = 9e4
        		BG.Parent = T
        		BV.Parent = T
        		BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
        		BG.cframe = T.CFrame
        		BV.velocity = Vector3.new(0, 0, 0)
        		BV.maxForce = Vector3.new(9e9, 9e9, 9e9)
        		task.spawn(function()
        			repeat wait()
        				if not vfly and game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
        					game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
        				end
        				if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
        					SPEED = 50
        				elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
        					SPEED = 0
        				end
        				if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
        					BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
        					lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
        				elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
        					BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
        				else
        					BV.velocity = Vector3.new(0, 0, 0)
        				end
        				BG.cframe = workspace.CurrentCamera.CoordinateFrame
        			until not CurFly
        			CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
        			lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
        			SPEED = 0
        			BG:Destroy()
        			BV:Destroy()
        			if game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
        				game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
        			end
        		end)
        	end
        	flyKeyDown = Mouse.KeyDown:Connect(function(KEY)
        		if KEY:lower() == 'w' then
        			CONTROL.F = (vfly and vehicleflyspeed or flyspeed)
        		elseif KEY:lower() == 's' then
        			CONTROL.B = - (vfly and vehicleflyspeed or flyspeed)
        		elseif KEY:lower() == 'a' then
        			CONTROL.L = - (vfly and vehicleflyspeed or flyspeed)
        		elseif KEY:lower() == 'd' then 
        			CONTROL.R = (vfly and vehicleflyspeed or flyspeed)
        		elseif Fly and KEY:lower() == 'e' then
        			CONTROL.Q = (vfly and vehicleflyspeed or flyspeed)*2
        		elseif Fly and KEY:lower() == 'q' then
        			CONTROL.E = -(vfly and vehicleflyspeed or flyspeed)*2
        		end
        		pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Track end)
        	end)
        	flyKeyUp = Mouse.KeyUp:Connect(function(KEY)
        		if KEY:lower() == 'w' then
        			CONTROL.F = 0
        		elseif KEY:lower() == 's' then
        			CONTROL.B = 0
        		elseif KEY:lower() == 'a' then
        			CONTROL.L = 0
        		elseif KEY:lower() == 'd' then
        			CONTROL.R = 0
        		elseif KEY:lower() == 'e' then
        			CONTROL.Q = 0
        		elseif KEY:lower() == 'q' then
        			CONTROL.E = 0
        		end
        	end)
        	FLY()
        end
        sFLY(true)
    elseif fly == true then
        fly = not fly
    	CurFly = false
    	if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
    	if game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
    		game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
    	end
    	pcall(function() game.workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)
    end
end)
flinging = false
LocalPlayer:NewKeybind("Fling", "Fling", Enum.KeyCode.M, function()
    pcall(function()
        if flinging ~= true then
            function getRoot(char)
            	local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
            	return rootPart
            end
            function randomString()
            	local length = math.random(10,20)
            	local array = {}
            	for i = 1, length do
            		array[i] = string.char(math.random(32, 126))
            	end
            	return table.concat(array)
            end
        	flinging = false
        	for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        		if v:IsA("BasePart") then
        			v.CustomPhysicalProperties = PhysicalProperties.new(math.huge, 0.3, 0.5)
        		end
        	end
            noclip = game:GetService("RunService").RenderStepped:Connect(function()
                for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                    pcall(function()
                        if v:IsA("BasePart") then
                            v.CanCollide = false
                        end
                    end)
                end
                game:GetService("RunService").Stepped:wait()
            end)
        	wait(.1)
        	local bambam = Instance.new("BodyAngularVelocity")
        	bambam.Name = randomString()
        	bambam.Parent = getRoot(game.Players.LocalPlayer.Character)
        	bambam.AngularVelocity = Vector3.new(0,99999,0)
        	bambam.MaxTorque = Vector3.new(0,math.huge,0)
        	bambam.P = math.huge
        	for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
        		if v:IsA("BasePart") then
        			v.CanCollide = false
        			v.Massless = true
        			v.Velocity = Vector3.new(0, 0, 0)
        		end
        	end
        	flinging = true
        	local function flingDiedF()
            	if flingDied then
            		flingDied:Disconnect()
            	end
            	flinging = false
            	wait(.1)
            	if not game.Players.LocalPlayer.Character or not getRoot(game.Players.LocalPlayer.Character) then return end
            	for i,v in pairs(getRoot(game.Players.LocalPlayer.Character):GetChildren()) do
            		if v.ClassName == 'BodyAngularVelocity' then
            			v:Destroy()
            		end
            	end
            	for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
            		if v.ClassName == "Part" or v.ClassName == "MeshPart" then
            			v.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
            		end
            	end
        	end
        	flingDied = game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').Died:Connect(flingDiedF)
        	repeat
        		bambam.AngularVelocity = Vector3.new(0,99999,0)
            	wait(.2)
            	bambam.AngularVelocity = Vector3.new(0,0,0)
            	wait(.1)
        	until flinging == false
        else
            if flingDied then
            	flingDied:Disconnect()
            end
            flinging = false
            wait(.1)
            if not game.Players.LocalPlayer.Character or not getRoot(game.Players.LocalPlayer.Character) then return end
            for i,v in pairs(getRoot(game.Players.LocalPlayer.Character):GetChildren()) do
            	if v.ClassName == 'BodyAngularVelocity' then
            		v:Destroy()
            	end
            end
            for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
            	if v.ClassName == "Part" or v.ClassName == "MeshPart" then
            		v.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
            	end
            end
        end
    end)
end)
LocalPlayer:NewSlider("FlySpeed", "Changes ur Fly Speed", 20, 1, function(c)
    vehicleflyspeed = c
end)
LocalPlayer:NewSlider("WalkSpeed", "Changes ur Speed", 500, 16, function(a) -- 500 = max 0 = min

game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = a
end)
LocalPlayer:NewSlider("JumpHeight", "Changes ur Jump Power", 500, 50, function(b) -- 500 = max 0 = min

    game.Players.LocalPlayer.Character.Humanoid.JumpPower = b

end)





--[[
-------------------Misc----------------
--]]







local Misc = Window:NewTab("Misc")
local Misc = Misc:NewSection("Misc")
Misc:NewButton("Rejoin", "Teleports u into the same server again", function()
game:GetService("TeleportService"):Teleport(game.PlaceId,game:GetService("Players").LocalPlayer)
end)
Misc:NewButton("Server Hop", "Teleports u into the Another Server of the game", function()
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(4)
            end
        end
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end


Teleport()
end)
Misc:NewButton("Save Pos", "Saves ur Current Position so u can go back to it", function()
    pcall(function()
        Save = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
    end)
end)
Misc:NewButton("Load Pos", "Teleports u To ur Saved Position", function()
    if Save ~= nil then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Save
    end
end)
Misc:NewButton("Teleport to Tree", "Teleports u To an Existing Tree if A Tree Exists", function()
    pcall(function()
        for i,v in pairs(game.workspace:GetChildren()) do
            if v.Name == "Conifer" and v:FindFirstChildWhichIsA("BasePart") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v:FindFirstChildWhichIsA("BasePart").CFrame
                break
            end
        end
    end)
end)
Misc:NewButton("Teleport to Stone", "Teleports u To an Existing Stone if A Stone Exists", function()
    pcall(function()
        for i,v in pairs(game.workspace:GetChildren()) do
            if v.Name == "Rock" and v:FindFirstChildWhichIsA("BasePart") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v:FindFirstChildWhichIsA("BasePart").CFrame
                break
            end
        end
    end)
end)
Misc:NewButton("Teleport to Iron", "Teleports u To an Existing Silver if A Silver Exists", function()
    pcall(function()
        for i,v in pairs(game.workspace:GetChildren()) do
            if v.Name == "Silver Rock" and v:FindFirstChildWhichIsA("BasePart") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v:FindFirstChildWhichIsA("BasePart").CFrame
                break
            end
        end
    end)
end)
Misc:NewButton("Teleport to Gold", "Teleports u To an Existing Gold if A Gold Exists", function()
    pcall(function()
        for i,v in pairs(game.workspace:GetChildren()) do
            if v.Name == "Gold Rock" and v:FindFirstChildWhichIsA("BasePart") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v:FindFirstChildWhichIsA("BasePart").CFrame
                break
            end
        end
    end)
end)
Misc:NewButton("Teleport to Ruby", "Teleports u To an Existing Ruby if A Ruby Exists", function()
    pcall(function()
        for i,v in pairs(game.workspace:GetChildren()) do
            if v.Name == "Ruby Rock" and v:FindFirstChildWhichIsA("BasePart") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v:FindFirstChildWhichIsA("BasePart").CFrame
                break
            end
        end
    end)
end)
Misc:NewButton("Teleport to Diamond", "Teleports u To an Existing Diamond if A Ruby Exists", function()
    pcall(function()
        for i,v in pairs(game.workspace:GetChildren()) do
            if v.Name == "Diamond Rock" and v:FindFirstChildWhichIsA("BasePart") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v:FindFirstChildWhichIsA("BasePart").CFrame
                break
            end
        end
    end)
end)
getgenv().AutoGoodLoot = false
Misc:NewToggle("Auto Pick Up Good Loot", "Automaticly Picks Up Good Loot for u if something drops and is in sight range", function(state)
    List =  {"Unrefined Ruby" , "Ruby" , "Ruby Boots" , "Ruby Legs" , "Ruby Body" , "Ruby Bag" , "Ruby Helmet" , "Ruby Harvester" , "Ruby Sword" , "Unrefined Diamond" , "Diamond" , "Diamond Boots" , "Diamond Legs" , "Diamond Body" , "Diamond Bag" , "Diamond Helmet" , "Diamond Harvester" }
    getgenv().AutoGoodLoot = not getgenv().AutoGoodLoot
    while getgenv().AutoGoodLoot == true do
        for i,v in pairs(game.workspace:GetChildren()) do
            if table.find(List,v.Name) then
                if (v:FindFirstChildWhichIsA("BasePart").Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 15 then
                    game:GetService("ReplicatedStorage").References.Comm.Events.ItemInteracted:FireServer(v,"Pickup")
                else
                    save = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v:FindFirstChildWhichIsA("BasePart").CFrame
                    wait()
                    game:GetService("ReplicatedStorage").References.Comm.Events.ItemInteracted:FireServer(v,"Pickup")
                    wait()
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = save
                end
            end
        end
        wait()
    end
end)
local function GetNearestItem()
    local Closest
    local PlayerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
     
    for i,v in pairs(workspace:GetChildren()) do
        if not v:FindFirstChild("Health") and v:FindFirstChildWhichIsA("BasePart") then
            if Closest == nil then
                Closest = v:FindFirstChildWhichIsA("BasePart")
            else
                if (PlayerPosition - v:FindFirstChildWhichIsA("BasePart").Position).magnitude < (Closest.Position - PlayerPosition).magnitude then
                    Closest = v:FindFirstChildWhichIsA("BasePart")
                end
            end 
        end
    end
    return Closest.Parent
end
Misc:NewToggle("PickUp Aura", "Automaticly Picks Stuff Around u", function(state)
    if state then
        getgenv().AutoPickup = true
        while getgenv().AutoPickup == true do
            pcall(function()
                NeareastItem = GetNearestItem()
                Mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - NeareastItem:FindFirstChildWhichIsA("BasePart").Position).magnitude
                
                if Mag <= 30 then
                    local args = {
                        [1] = NeareastItem,
                        [2] = "Pickup"
                    }
                    
                    game:GetService("ReplicatedStorage").References.Comm.Events.ItemInteracted:FireServer(unpack(args))
                end
            end)
            wait()
        end
    else
        getgenv().AutoPickup = false
    end
end)
local function GetNearestObject()
    local Closest
    local PlayerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
     
    for i,v in pairs(workspace:GetDescendants()) do
        if v:FindFirstChild("Health") and v:FindFirstChildWhichIsA("BasePart") and not v:FindFirstChild("Humanoid")  then
            if Closest == nil then
                Closest = v:FindFirstChildWhichIsA("BasePart")
            else
                if (PlayerPosition - v:FindFirstChildWhichIsA("BasePart").Position).magnitude < (Closest.Position - PlayerPosition).magnitude then
                    Closest = v:FindFirstChildWhichIsA("BasePart")
                end
            end
        end
    end
        return Closest.Parent
end
Misc:NewToggle("Mine Aura", "Automaticly Mines Stuff Around u", function(state)
    if state then
        getgenv().AutoMine = true
        while getgenv().AutoMine == true do
            pcall(function()
                NeareastObject = GetNearestObject()
                    Mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - NeareastObject:FindFirstChildWhichIsA("BasePart").Position).magnitude
                if Mag <= 20 then
                    local args = {
                        [1] = 1,
                        [2] = "Destroyable",
                        [3] = NeareastObject
                    }
                    
                    game:GetService("ReplicatedStorage").References.Comm.Events.ToolAction:FireServer(unpack(args))
                end
            end)
            wait()
        end
    else
        getgenv().AutoMine = false
    end
end)






--[[
-------------------Settings----------------
--]]







local Settings = Window:NewTab("Settings")
local Settings = Settings:NewSection("Settings")
Settings:NewKeybind("Toggle Gui", "Press This Key To Toggle The Gui", Enum.KeyCode.F, function()
	Library:ToggleUI()
end)






--[[
-------------------Credits----------------
--]]







local Credits = Window:NewTab("Credits")
local Credits = Credits:NewSection("Credits")
Credits:NewLabel("Made by RQZEX#9971")
Credits:NewLabel("Credits: SkiddDev#2675")
Credits:NewButton("Join Discord", "Copy's The Link of the Discord", function()
getgenv().Discord = "suEFpCAFaD"
syn.request(
   {
       Url = "http://127.0.0.1:6463/rpc?v=1",
       Method = "POST",
       Headers = {
           ["Content-Type"] = "application/json",
           ["origin"] = "https://discord.com",
       },
       Body = game:GetService("HttpService"):JSONEncode(
           {
               ["args"] = {
                   ["code"] = getgenv().Discord,
               },
               ["cmd"] = "INVITE_BROWSER",
               ["nonce"] = "."
           })
   })
end)

loadstring(game:HttpGet("https://raw.githubusercontent.com/joemuma/script/main/Premium"))()
